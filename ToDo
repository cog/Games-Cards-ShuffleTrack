To Do list:

 * new deck
    * allow for user-specified order
    * start a deck with a specific number of cards
    * move the different deck orders to submodules

 * changing a deck
    * remove cards from a deck
        * $deck->remove_random();    # remove a random card
        * $deck->remove_random( 5 ); # remove five cards or remove the 5th card?
    * add cards to a deck (specific cards or random cards)
        * $deck->add( $card ); # add $card to the deck at a random position
        * $deck->add( $card, 20 ); # add $card to the deck at position 20

 * documentation
    * document what happens if you try to faro a deck with an odd number of cards
    * acknowledgments
    * update the list of recommended books
    * add a glossary
        * balance of the deck
        * top/bottom stock
    * create links on README.md to facilitate navigation on Github
    * update the descriptions of the different shuffles

 * shuffling
    * the wash
    * riffle shuffle
    	* riffle stacking
        * we're not considering how fast each half is being depleted nor whether the packets riffled on each side are of similar sizes
    * faro
        * faro X cards from the top
        * anti-faro

 * cutting the deck
    * controlled multiple cuts (e.g., cut the top X cards under position N)

 * testing
    * test the running cuts
    * testing without Test::Warn present complains about the number of planned tests being wrong

 * advanced
    * given a series of procedures and a desired final result, assert the initial order of the deck
    * track relationship between cards:
        - from a specific order and through a series of procedures, present conclusions about the end relationship
    * moving cards between places:
        - e.g., set three new positions - $hand, $table and $spectator - and deal cards from $hand alternatively to $table and $spectator)
    * given an initial deck order and a series of procedures, run that sequence X times to analyze the outcome (e.g., 1st card usually ends in certain positions)

 * cleanup
    * cleanup the variable names in the tests

 * handling cards
    * put # places a card on top of the deck, adding it to the deck
        $deck->put( 'AS' );
    * deal # deals the top card, removing it from the deck
        $deck->deal( 'bottom' );
        $deck->deal( 'greek' );
        $deck->deal( 'second' );
        $deck->deal( 'center' ); # how do we implement this one?
    * peek # peeks a card, accepts a position
        $deck->peek( 1 ); # peeks the top card
        $deck->peek( 'top' );
        $deck->peek( 'bottom' );
        $deck->peek( -1 ); # peeks the bottom card
    * take_random # takes a random card from the deck, removing it from the deck
        my $card = $deck->take_random();
        my $card = $deck->take_random( 14, -1 ); # block the top 13 cards from being taken
    * replace? ("to replace a card in the deck")
    * lose? ("to lose a card in the deck")

 * games
    * analyse hands in different games (poker, blackjack, etc)

 * examples
    * add example of a game simulation
    * add example of a magic trick


 * how to simulate a game

    my $deck = Games::Cards::ShuffleTracker->new();
    my @hands;
    for ( 1 .. 5 ) {
        push @hands, Games::Cards::ShuffleTracker->new('empty');
    }
    $deck->riffle_shuffle() for 1 .. 12;
    $deck->cut('deep');

    for ( 1 .. 5 ) {
        for my $hand ( @hands ) {
            $hand->put( $deck->deal() );
        }
    }

    for my $hand ( @hands ) {
        print "$hand";
    }


 * how to simulate a card trick

    my $deck = Games::Cards::ShuffleTracker->new();
       $deck->riffle_shuffle() for 1 .. 4;

    my $selected_card = $deck->take_random();
    my $key_card      = $deck->peek( -1 ); # peek the bottom card

    $deck->put( $selected_card );
    $deck->cut;

    print "Your card is the " . $deck->find_card_after( $key_card ) . "!\n";
